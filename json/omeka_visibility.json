[
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "baseColumnName": "o:is_public",
      "expression": "jython:if value == \"1\":\n    return \"PUBLIC_ITEM\"\nif value == None:\n    return \"PRIVATE_ITEM\"\nreturn \"ILLEGAL_VALUE\"",
      "onError": "set-to-blank",
      "newColumnName": "public_item",
      "columnInsertIndex": 1,
      "description": "Create column public_item at index 5 based on column o:is_public using expression jython:if value == \"1\":\n    return \"PUBLIC_ITEM\"\nif value == None:\n    return \"PRIVATE_ITEM\"\nreturn \"ILLEGAL_VALUE\""
    },
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "baseColumnName": "o:id",
      "expression": "jython:import json\n\ntry:\n    cells[\"media:full\"]\nexcept KeyError:\n    return \"NO_MEDIA\"\n\nmedias = cells[\"media:full\"].value[:-1]\nmedias = medias.split(\";\")\nmedias = \"[\" + \",\".join(medias) + \"]\"\nmedias = json.loads(medias)\n\nmedias_have_groups = False\nmedias_dont_have_groups = False\nfor media in medias:\n    if len(media[\"o-module-group:group\"]) > 0:\n        medias_have_groups = True\n    else:\n        medias_dont_have_groups = True\n\nif medias_have_groups and not medias_dont_have_groups:\n    return \"MEDIAS_HAVE_GROUPS\"\nelif not medias_have_groups and medias_dont_have_groups:\n    return \"MEDIAS_GROUPLESS\"\nelse:\n    return \"MEDIA_HYBRID_GROUP\"",
      "onError": "set-to-blank",
      "newColumnName": "medias_group",
      "columnInsertIndex": 1,
      "description": "Create column medias_group at index 1 based on column o:id using expression jython:import json\n\ntry:\n    cells[\"media:full\"]\nexcept KeyError:\n    return \"NO_MEDIA\"\n\nmedias = cells[\"media:full\"].value[:-1]\nmedias = medias.split(\";\")\nmedias = \"[\" + \",\".join(medias) + \"]\"\nmedias = json.loads(medias)\n\nmedias_have_groups = False\nmedias_dont_have_groups = False\nfor media in medias:\n    if len(media[\"o-module-group:group\"]) > 0:\n        medias_have_groups = True\n    else:\n        medias_dont_have_groups = True\n\nif medias_have_groups and not medias_dont_have_groups:\n    return \"MEDIAS_HAVE_GROUPS\"\nelif not medias_have_groups and medias_dont_have_groups:\n    return \"MEDIAS_GROUPLESS\"\nelse:\n    return \"MEDIA_HYBRID_GROUP\""
    },
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "baseColumnName": "o:id",
      "expression": "jython:import json\n\ntry:\n    cells[\"media:full\"]\nexcept KeyError:\n    return \"NO_MEDIA\"\n\nmedias = cells[\"media:full\"].value[:-1]\nmedias = medias.split(\";\")\nmedias = \"[\" + \",\".join(medias) + \"]\"\nmedias = json.loads(medias)\n\nmedias_public = False\nmedias_private = False\nfor media in medias:\n    if media[\"o:is_public\"]:\n        medias_public = True\n    else:\n        medias_private = True\n\nif medias_public and not medias_private:\n    return \"PUBLIC_MEDIAS\"\nelif not medias_public and medias_private:\n    return \"PRIVATE_MEDIAS\"\nelse:\n    return \"HYBRID_MEDIAS_VISIBILITY\"",
      "onError": "set-to-blank",
      "newColumnName": "medias_public",
      "columnInsertIndex": 1,
      "description": "Create column medias_public at index 1 based on column o:id using expression jython:import json\n\ntry:\n    cells[\"media:full\"]\nexcept KeyError:\n    return \"NO_MEDIA\"\n\nmedias = cells[\"media:full\"].value[:-1]\nmedias = medias.split(\";\")\nmedias = \"[\" + \",\".join(medias) + \"]\"\nmedias = json.loads(medias)\n\nmedias_public = False\nmedias_private = False\nfor media in medias:\n    if media[\"o:is_public\"]:\n        medias_public = True\n    else:\n        medias_private = True\n\nif medias_public and not medias_private:\n    return \"PUBLIC_MEDIAS\"\nelif not medias_public and medias_private:\n    return \"PRIVATE_MEDIAS\"\nelse:\n    return \"HYBRID_MEDIAS_VISIBILITY\""
    },
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "baseColumnName": "o:id",
      "expression": "jython:try:\n    cells[\"o-module-group:group\"]\nexcept KeyError:\n    return \"ITEM_GROUPLESS\"\nelse:\n    return \"ITEM_HAVE_GROUPS\"",
      "onError": "set-to-blank",
      "newColumnName": "item_groups",
      "columnInsertIndex": 1,
      "description": "Create column item_groups at index 1 based on column o:id using expression jython:try:\n    cells[\"o-module-group:group\"]\nexcept KeyError:\n    return \"ITEM_GROUPLESS\"\nelse:\n    return \"ITEM_HAVE_GROUPS\""
    },
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "baseColumnName": "o:id",
      "expression": "jython:if cells[\"medias_public\"].value == \"NO_MEDIA\":\n    if cells[\"public_item\"].value == \"PUBLIC_ITEM\":\n        return \"PUBLIC_MEDIALESS\"\n    if cells[\"public_item\"].value == \"PRIVATE_ITEM\" and cells[\"item_groups\"].value == \"ITEM_HAVE_GROUPS\":\n        return \"AUTHENTIFICATION_MEDIALESS\"\n    if cells[\"public_item\"].value == \"PRIVATE_ITEM\" and cells[\"item_groups\"].value == \"ITEM_GROUPLESS\":\n        return \"PRIVATE_MEDIALESS\"\n    return \"ILLEGAL_ITEM_VISIBILITY\"\nif cells[\"medias_public\"].value == \"PUBLIC_MEDIAS\":\n    if cells[\"public_item\"].value == \"PUBLIC_ITEM\":\n        return \"PUBLIC\"\n    if cells[\"public_item\"].value == \"PRIVATE_ITEM\":\n        return \"PUBLIC_MEDIAS_ITEM_PRIVATE_MISCONFIGURED\"\n    return \"PUBLIC_MEDIAS_ILLEGAL_ITEM_VISIBILITY\"\nif cells[\"medias_public\"].value == \"HYBRID_MEDIAS_VISIBILITY\":\n    if cells[\"public_item\"].value == \"PUBLIC_ITEM\":\n        return \"HYBRID\"\n    if cells[\"public_item\"].value == \"PRIVATE_ITEM\":\n        return \"HYBRID_MEDIAS_ITEM_PRIVATE_MISCONFIGURED\"\n    return \"HYBRID_MEDIAS_ILLEGAL_ITEM_VISIBILITY\"\nif cells[\"medias_public\"].value == \"PRIVATE_MEDIAS\":\n    if cells[\"medias_group\"].value == \"MEDIAS_HAVE_GROUPS\":\n        return \"AUTHENTIFICATION\"\n    if cells[\"medias_group\"].value == \"MEDIAS_GROUPLESS\":\n        return \"PRIVATE\"\n    if cells[\"medias_group\"].value == \"MEDIA_HYBRID_GROUP\":\n        return \"HYBRID_AUTH_PRIVATE\"\n    return \"PRIVATE_MEDIAS_ILLEGAL_VISIBILITY\"",
      "onError": "set-to-blank",
      "newColumnName": "summary",
      "columnInsertIndex": 1,
      "description": "Create column summary at index 1 based on column o:id using expression jython:if cells[\"medias_public\"].value == \"NO_MEDIA\":\n    if cells[\"public_item\"].value == \"PUBLIC_ITEM\":\n        return \"PUBLIC_MEDIALESS\"\n    if cells[\"public_item\"].value == \"PRIVATE_ITEM\" and cells[\"item_groups\"].value == \"ITEM_HAVE_GROUPS\":\n        return \"AUTHENTIFICATION_MEDIALESS\"\n    if cells[\"public_item\"].value == \"PRIVATE_ITEM\" and cells[\"item_groups\"].value == \"ITEM_GROUPLESS\":\n        return \"PRIVATE_MEDIALESS\"\n    return \"ILLEGAL_ITEM_VISIBILITY\"\nif cells[\"medias_public\"].value == \"PUBLIC_MEDIAS\":\n    if cells[\"public_item\"].value == \"PUBLIC_ITEM\":\n        return \"PUBLIC\"\n    if cells[\"public_item\"].value == \"PRIVATE_ITEM\":\n        return \"PUBLIC_MEDIAS_ITEM_PRIVATE_MISCONFIGURED\"\n    return \"PUBLIC_MEDIAS_ILLEGAL_ITEM_VISIBILITY\"\nif cells[\"medias_public\"].value == \"HYBRID_MEDIAS_VISIBILITY\":\n    if cells[\"public_item\"].value == \"PUBLIC_ITEM\":\n        return \"HYBRID\"\n    if cells[\"public_item\"].value == \"PRIVATE_ITEM\":\n        return \"HYBRID_MEDIAS_ITEM_PRIVATE_MISCONFIGURED\"\n    return \"HYBRID_MEDIAS_ILLEGAL_ITEM_VISIBILITY\"\nif cells[\"medias_public\"].value == \"PRIVATE_MEDIAS\":\n    if cells[\"medias_group\"].value == \"MEDIAS_HAVE_GROUPS\":\n        return \"AUTHENTIFICATION\"\n    if cells[\"medias_group\"].value == \"MEDIAS_GROUPLESS\":\n        return \"PRIVATE\"\n    if cells[\"medias_group\"].value == \"MEDIA_HYBRID_GROUP\":\n        return \"HYBRID_AUTH_PRIVATE\"\n    return \"PRIVATE_MEDIAS_ILLEGAL_VISIBILITY\""
    },
    {
      "op": "core/column-reorder",
      "columnNames": [
        "o:id",
        "koha:biblionumber",
        "summary",
        "public_item",
        "item_groups",
        "medias_public",
        "medias_group",
        "@context",
        "@id",
        "@type",
        "o:is_public",
        "o:owner",
        "o:resource_class",
        "o:resource_template",
        "o:thumbnail",
        "o:title",
        "thumbnail_display_urls",
        "o:created",
        "o:modified",
        "o:media",
        "o:item_set",
        "o:site",
        "dcterms:title",
        "dcterms:type",
        "dcterms:creator",
        "dcterms:alternative",
        "dcterms:provenance",
        "dcterms:date",
        "o-module-group:group",
        "media:link",
        "media:full",
        "dcterms:title2",
        "dcterms:creator2",
        "dcterms:subject",
        "dcterms:description",
        "dcterms:publisher",
        "dcterms:contributor",
        "dcterms:date2",
        "dcterms:type2",
        "dcterms:format",
        "dcterms:identifier",
        "dcterms:source",
        "dcterms:language",
        "dcterms:relation",
        "dcterms:coverage",
        "dcterms:rights",
        "dcterms:audience",
        "dcterms:alternative2",
        "dcterms:tableOfContents",
        "dcterms:abstract",
        "dcterms:created",
        "dcterms:valid",
        "dcterms:available",
        "dcterms:issued",
        "dcterms:modified",
        "dcterms:extent",
        "dcterms:medium",
        "dcterms:isVersionOf",
        "dcterms:hasVersion",
        "dcterms:isReplacedBy",
        "dcterms:replaces",
        "dcterms:isRequiredBy",
        "dcterms:requires",
        "dcterms:isPartOf",
        "dcterms:hasPart",
        "dcterms:isReferencedBy",
        "dcterms:references",
        "dcterms:isFormatOf",
        "dcterms:hasFormat",
        "dcterms:conformsTo",
        "dcterms:spatial",
        "dcterms:temporal",
        "dcterms:mediator",
        "dcterms:dateAccepted",
        "dcterms:dateCopyrighted",
        "dcterms:dateSubmitted",
        "dcterms:educationLevel",
        "dcterms:accessRights",
        "dcterms:bibliographicCitation",
        "dcterms:license",
        "dcterms:rightsHolder",
        "dcterms:provenance2",
        "dcterms:instructionalMethod",
        "dcterms:accrualMethod",
        "dcterms:accrualPeriodicity",
        "dcterms:accrualPolicy",
        "bibo:affirmedBy",
        "bibo:annotates",
        "bibo:authorList",
        "bibo:citedBy",
        "bibo:cites",
        "bibo:contributorList",
        "bibo:court",
        "bibo:degree",
        "bibo:director",
        "bibo:distributor",
        "bibo:editor",
        "bibo:editorList",
        "bibo:interviewee",
        "bibo:interviewer",
        "bibo:issuer",
        "bibo:organizer",
        "bibo:owner",
        "bibo:performer",
        "bibo:presentedAt",
        "bibo:presents",
        "bibo:producer",
        "bibo:recipient",
        "bibo:reproducedIn",
        "bibo:reversedBy",
        "bibo:reviewOf",
        "bibo:status",
        "bibo:subsequentLegalDecision",
        "bibo:transcriptOf",
        "bibo:translationOf",
        "bibo:translator",
        "bibo:abstract",
        "bibo:argued",
        "bibo:asin",
        "bibo:chapter",
        "bibo:coden",
        "bibo:content",
        "bibo:doi",
        "bibo:eanucc13",
        "bibo:edition",
        "bibo:eissn",
        "bibo:gtin14",
        "bibo:handle",
        "bibo:identifier",
        "bibo:isbn",
        "bibo:isbn10",
        "bibo:isbn13",
        "bibo:issn",
        "bibo:issue",
        "bibo:lccn",
        "bibo:locator",
        "bibo:numPages",
        "bibo:numVolumes",
        "bibo:number",
        "bibo:oclcnum",
        "bibo:pageEnd",
        "bibo:pageStart",
        "bibo:pages",
        "bibo:pmid",
        "bibo:prefixName",
        "bibo:section",
        "bibo:shortDescription",
        "bibo:shortTitle",
        "bibo:sici",
        "bibo:suffixName",
        "bibo:upc",
        "bibo:uri",
        "bibo:volume",
        "foaf:mbox",
        "foaf:mbox_sha1sum",
        "foaf:gender",
        "foaf:geekcode",
        "foaf:dnaChecksum",
        "foaf:sha1",
        "foaf:based_near",
        "foaf:title",
        "foaf:nick",
        "foaf:jabberID",
        "foaf:aimChatID",
        "foaf:skypeID",
        "foaf:icqChatID",
        "foaf:yahooChatID",
        "foaf:msnChatID",
        "foaf:name",
        "foaf:firstName",
        "foaf:lastName",
        "foaf:givenName",
        "foaf:givenname",
        "foaf:surname",
        "foaf:family_name",
        "foaf:familyName",
        "foaf:phone",
        "foaf:homepage",
        "foaf:weblog",
        "foaf:openid",
        "foaf:tipjar",
        "foaf:plan",
        "foaf:made",
        "foaf:maker",
        "foaf:img",
        "foaf:depiction",
        "foaf:depicts",
        "foaf:thumbnail",
        "foaf:myersBriggs",
        "foaf:workplaceHomepage",
        "foaf:workInfoHomepage",
        "foaf:schoolHomepage",
        "foaf:knows",
        "foaf:interest",
        "foaf:topic_interest",
        "foaf:publications",
        "foaf:currentProject",
        "foaf:pastProject",
        "foaf:fundedBy",
        "foaf:logo",
        "foaf:topic",
        "foaf:primaryTopic",
        "foaf:focus",
        "foaf:isPrimaryTopicOf",
        "foaf:page",
        "foaf:theme",
        "foaf:account",
        "foaf:holdsAccount",
        "foaf:accountServiceHomepage",
        "foaf:accountName",
        "foaf:member",
        "foaf:membershipClass",
        "foaf:birthday",
        "foaf:age",
        "foaf:status",
        "koha:biblionumber2",
        "Colonne 212",
        "Valid_JSON",
        "Colonne 213",
        "Colonne 214",
        "Colonne 215",
        "Colonne 216",
        "Colonne 217",
        "Colonne 218",
        "Colonne 219",
        "Colonne 220",
        "Colonne 221",
        "Colonne 222",
        "Colonne 223",
        "Colonne 224",
        "Colonne 225",
        "Colonne 226",
        "Colonne 227",
        "Colonne 228",
        "Colonne 229",
        "Colonne 230",
        "Colonne 231",
        "Colonne 232",
        "Colonne 233",
        "Colonne 234",
        "Colonne 235",
        "Colonne 236",
        "Colonne 237",
        "Colonne 238",
        "Colonne 239",
        "Colonne 240",
        "Colonne 241",
        "Colonne 242",
        "Colonne 243",
        "Colonne 244",
        "Colonne 245",
        "Colonne 246",
        "Colonne 247",
        "Colonne 248",
        "Colonne 249",
        "Colonne 250",
        "Colonne 251",
        "Colonne 252",
        "Colonne 253",
        "Colonne 254",
        "Colonne 255",
        "Colonne 256",
        "Colonne 257",
        "Colonne 258",
        "Colonne 259",
        "Colonne 260",
        "Colonne 261"
      ],
      "description": "Reorder columns"
    }
  ]